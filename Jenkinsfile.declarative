def imageName = 'mlabouardy/movies-store'
def myImageName = 'monarene/movie-store'


pipeline {
    agent any 

    stages {
        stage('Checkout'){
            steps{
                checkout scm
            }
        }

        stage('Run Tests') {
            parallel {
                stage('Quality Tests'){
                    steps{
                    script {
                        def imageTest= docker.build("${imageName}-test", "-f Dockerfile.test .")
                        sh "docker run --rm ${imageName}-test npm run lint"
                    }
                }
            }

            stage('Integration Tests'){
                    steps{
                    script {
                        sh "docker run --rm ${imageName}-test npm run test"
                    }
                }
            }

            stage('Coverage Reports'){
                    steps{
                    script {
                        sh "docker run --rm -v $PWD/coverage:/app/coverage ${imageName}-test npm run coverage-html"
                        publishHTML (target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "$PWD/coverage",
                            reportFiles: "index.html",
                            reportName: "Coverage Report"
                        ])

                    }
                }
            }
            }
        }

        stage('Build'){
            steps{
                script {
                    dockerImage = docker.build(myImageName)
                }
            }
        }

        stage('Push'){

            steps{
                script {

                    withDockerRegistry([credentialsId: "dockerhub", url: "" ]) {
                    dockerImage.push(commitID())
                    if (env.BRANCH_NAME == 'develop') {
                    dockerImage.push('develop')
                }
            
            }

        }}}
}

}


def commitID() {
    sh 'git rev-parse HEAD > .git/commitID'
    def commitID = readFile('.git/commitID').trim()
    sh 'rm .git/commitID'
    commitID
}